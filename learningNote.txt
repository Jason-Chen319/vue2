虚拟DOM示意图
    模板                                渲染函数                     虚拟DOM树                      真实DOM
                       compile                       render                          create
<ui id='my-id'>          =>       createElement{       =>           VNode               =>         <ul>
  <li                               'ul',  //节点标签名                child: undefined               <li>1</li>
    v-for='item in list'>           //标签上的属性，用对象存储件键值对   children: Array[3]             <li>2</li>
        {{item}}                    {                                   0: VNode                     <li>3</li>
  </li>                               attr: {                           1: VNode                   </ul>
                                        id: 'my-id'                     2: VNode
                                      }                                   length:3
                                    },                                    _proto_:Array[3]
                                    //该节点的子节点                       componentOptions:underfined
                                    {                                     elm:el
                                      createElement('li',1)
                                      createElement('li',2)
                                      createElement('li',3)
                                    }
                                  }


1.渐进式框架Vue
2.vue中两个核心点
3.虚拟DOM
4.MVVM模式
5.Vue实例
6.声明式渲染
7.指令
8.模板

Vue 简介
    Vue是什么
      构建用户界面的渐进式框架
      只关注图层（view）
      声明式渲染（数据渲染） --> 组件系统(分n个模块) -->客户端路由（sp单页面应用） --> 大规模状态管理（共享数据） --> 构建管理（打包工具）

Vue的两个核心点
    响应的数据绑定
        当数据发生改变 -> 自动更新视图
        利用Object.definedProperty中的setter/getter代理数据，监控对数据的操作
        示例：10s入门vue.html
    组合的视图组件
        ui页面映射为组件树
        划分为组件可维护、可重用、可测试

虚拟DOM
    虚拟DOM(virtual DOM)
        运行js的速度是很快的，大量的操作DOM就会很慢，时常在更新数据后会重新渲染页面，这样造成在没有改变数据的地方会从新渲染DOM节点，这样就造成很大程度上的资源浪费。
        利用在内存中生成与真实DOM与之对应的数据结构，这个内存中生成的结构称之为虚拟DOM.
        当数据发生变化时，能够智能地计算出重新渲染组件的最小代价并应用到DOM操作上。

MVVM模式
    MVVM模式
        M: Model数据模型
        V: view 视图模板
        VM: view-Model 视图模型

渐进式学习提纲
    基础语法
        vue实例   模板语法
        计算属性  class和style绑定
        条件和列表渲染 事件处理函数
        表单控件绑定  组件

    高级进阶
        vue插件编写 mixin混合
        过渡效果    自定义指令
        vue-router: 路由系统的使用   vuex:状态管理

    构建工具
        nodejs: javascript运行环境  webpack: 模块管理和打包工具
        vue-cli: 脚手架配置

vue实例
    vue实例
        每一个应用都是通过Vue这个构造函数创建根实例(root instance)启动new Vue(选项对象)
        需要传入选项对象，对象包含挂载元素，数据，模板、方法等。
            el: 挂载元素选择器 String|HTMLElement
            data： 代理数据  Object|Function
            methods: 定义方法   Object

    vue代理data数据
        每个Vue实例都会代理其data对象里所有的属性，这些被代理的属性是响应的，新添加的属性不具备响应功能，改变后不会更新视图。

    vue实例自身属性和方法
        暴露滋生的属性和方法，已$开头 例如: $el $data...

声明式渲染
    声明式
        只需要声明在哪里(where)做什么，而无需关心如何实现(how)
    命令式
        需要以具体代码表达在哪里(where)做什么(what)，如何实现(how)
        例子: 求数组中每一项的倍数
            命令式
                使用for玄幻拿出每一项，然后求知完成后，再放入到另一数组中
            声明式
                使用map方法，关注如何求值
    vue声明式渲染
        初始化根实例，vue自动将数据绑定在DOM模板上.

指令
    什么是指令
        是一种特殊的自定义行间属性
        指令的职责就是当其表达式的值改变时相应地将某些行为应用到DOM上
        在vue中，指令以v-开头

内置指令
    vue中的内置指令
        v-bind 动态的绑定数据。简写为 ：    v-on 绑定事件监听器，简写为@
        v-text 更新数据，会覆盖已有结构     v-html 可以解析数据中的html
        v-show 根据值得真假，切换元素的display  v-if 根据值得真假，切换元素会被销毁，重建
        v-else-if 多条件判断，为真则渲染，  v-else 条件都不符合渲染
        v-for 基于源数据多次渲染元素或模板块   v-model 在表单控件元素上创造双向数据绑定
        v-pre 跳过元素和子元素的编译过程     v-once 只渲染一次，随后数据更新不重新渲染
        v-cloak 隐藏未编译的Mustache语法，css中设置(v-cloak){display:none}

html模板
    html模板
        基于DOM的模板，模板都是可解析的有效的HTML
    插值
        文本：使用"Mustache"语法 (双大括号){{value}}
                作用：替换实例上的属性值，当值改变时，插值内容处会自动更新
        原生的html:双大括号输出的是文本，不会解析html
        属性：使用v-bind进行绑定，可以响应变化
        使用javascript表达式：写简单的表达式

字符串模板
    template选项对象的属性
    模板将会替换挂载的元素，挂载元素的内容都将被忽略
    根节点只能有一个
    将html结构写在一对script标签中， type='x-template'

模板-render函数
    render函数
        render 选项对象的属性                          <div class='message'>           render () {
                                                        Hello world             ==>>    return h {
                                                      </div>                              'div',
                                                                                          {class: 'message'},
        createElement(标签名, [数据对象], 子元素)                                           ['Hello World'],
            子元素为文本或数组                                                            }
                                                                                      }

    数据对象属性
        class：{},           //绑定class,和v-bind:class 一样的API
        style: {},          //绑定样式, 和v-bind:style 一样的API
        attrs: {},          //添加行间属性
        domProps: {},       //DOM元素属性
        on: {}              //绑定事件

        nativeOn: {},       //监听原生事件
        directives: {},     //自定义指令
        scopedSlots: {},    //slot作用域
        slot: {},           //定义slot名称
        key: 'key',         //给元素添加唯一标示
        ref: 'ref'          //引用信息

列表渲染
    v-for指令
        根据一组数组的选项列表进行渲染
        语法：
            value,key in items
            value,key of items
    变异方法
        vue提供一组方法，对数组进行操作时候，会触发视图更新
        push()    pop()   shift()   unshift()
        splice()  sort()  reverse()

事件处理器
    v-on指令
        用来监听DOM事件触发代码
        语法：
            v-on:eventName='eventHandle'
        指令简写：
            @
        事件处理函数
            写在methods中统一管理
        事件对象
            在事件处理函数中获取
            内联事件处理函数执行，传入事件对象
                $event

    事件修饰符
        事件处理函数只有纯粹的逻辑判断，不处理DOM事件的细节
        例如，阻止冒泡、取消默认行为、判断按键

        修饰符的位置
            v-on:eventName.修饰符
        修饰符:
            .stop .prevent .capture .self .once
        按键修饰符：
            .enter  .tab  .delete  .esc
            .space  .up   .down    .left   .right
            .ctrl   .alt  .shift   .meta
            .键值 //键盘按键号码keyCode

条件渲染
    v-show指令
        根据表达式的值，用来显示/隐藏元素
        语法：
            v-show='表达式'
        元素会被渲染在页面中，只根据表达式的值进行css切换

动态class
    动态绑定class
        class也为元素的属性，可以使用v-bind:class
        语法：
            :class='{className:表达式}'
                表达式值为true添加className
                表达式值为false不添加className

            :class='[className,classname]'

自定义指令
    自定义指令
        除了vue内置的指令，可以自己设置指令
        选项对象的directives属性
        {
            directives: {}
        }

        钩子函数：
            update 被绑定元素所在的模板更新时调用
            钩子函数中参数：
                el: 指令所绑定的元素，可以用来直接用来操作DOM
                binding: 一个对象
                    value: 指令的绑定值

计算数据
    为什么要使用计算属性
        模板是为了描述视图的结构，模板中放入太多逻辑，导致模板过重且难以维护。
        在计算一个计算属性时，Vue.js更新它的依赖列表并缓存结果，只有当其中一个依赖发生了变化，缓存的结果才无效。

    语法:
        在选项对象中
        {
            ...
            computed: {}
        }

组件化开发
    什么是组件？
        WEB中的组件其实就是页面组成的一部分，好比是电脑中的每一个元件（如硬盘、键盘、鼠标），它是一个具有独立的逻辑和功能或界面，同时又能根据规定的接口规则进行相互融合，变成一个完整的应用。
        页面就是由一个个类似这样的部分组成的，比如导航、列表、弹窗、下拉菜单等。页面只不过是这些组件的容器，组件自由组合形成功能完整的界面，当不需要某个组件，或者想要替换某个组件时，可以随时进行替换和删除，而不影响整个应用的运行。

    前端组件化的核心思路就是将严格巨大复杂的东西拆分成粒度合理的小东西。

    使用组件的好处？
        提高开发效率
        方便重复使用
        简化调试步骤
        提升整个项目的可维护性
        便于协同开发

vue中的组件
    vue中的组件
        vue中组件是一个自定义标签，Vue.js的编译器为它添加特殊功能
        vue也可以扩展原生的html元素，封装可重用的代码

    组件的基本组成：
        样式结构
        行为逻辑
        数据

